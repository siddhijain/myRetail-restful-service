package com.target.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.target.model.Product;
import com.target.model.ProductDetails;
import com.target.model.ProductPrice;
import com.target.service.ProductService;

@RestController
@RequestMapping(value = "/products")
public class ProductController {
	
	@Autowired
	ProductService productService;
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public Product getProductDetailsById(@PathVariable("id") String productId) {
		int threadNum = 2;
        ExecutorService executor = Executors.newFixedThreadPool(threadNum);
        List<FutureTask<?>> taskList = new ArrayList<FutureTask<?>>();
        FutureTask<ProductPrice> productPriceTask = new FutureTask<>(new Callable<ProductPrice>() {
        	@Override
        	public ProductPrice call() {
        		return productService.getProductPriceDetailsById(productId);
        	}
        	});
        
        taskList.add(productPriceTask);
        
        FutureTask<ProductDetails> productDetails = new FutureTask<>(new Callable<ProductDetails>() {
        	@Override
        	public ProductDetails call() {
        		return productService.getProductDetailsById(productId);
        	}
        });
     
 
        // Start thread for the first half of the numbers
        FutureTask<Integer> futureTask_1 = new FutureTask<Integer>(new Callable<Integer>() {
            @Override
            public Integer call() {
                return FutureTaskDemo.amountOfDivisibleBy(first, last / 2, divisor);
            }
        });
        taskList.add(futureTask_1);
        executor.execute(futureTask_1);
 
        // Start thread for the second half of the numbers
        FutureTask<Integer> futureTask_2 = new FutureTask<Integer>(new Callable<Integer>() {
            @Override
            public Integer call() {
                return FutureTaskDemo.amountOfDivisibleBy(last / 2 + 1, last, divisor);
            }
        });
        taskList.add(futureTask_2);
        executor.execute(futureTask_2);
 
        // Wait until all results are available and combine them at the same time
        for (int j = 0; j < threadNum; j++) {
            FutureTask<Integer> futureTask = taskList.get(j);
            
        }
        executor.shutdown();
		
		
		return productService.getProductDetailsById(productId);
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
	public void updateProductDetailsById(@PathVariable("id") String productId, @RequestBody Product product) {
		productService.updateProductDetailsById(productId,product.getCurrencyPrice(),product.getCurrencyCode());
	}

}
